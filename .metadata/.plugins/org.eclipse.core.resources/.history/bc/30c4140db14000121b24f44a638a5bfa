/*
 ============================================================================
 Name        : servidor.c
 Author      :
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <linux/fs.h>
#include <sys/stat.h>
#include <sys/epoll.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>
#define MAX_EVENTS 20
#define MIN_CONEXIONES 5

#define PROCESO         1//Paquete que envia un proceso ~ cliente a servidor
#define SUSPENSION      2//Paquete que avisa de la suspension ~  servidor a cliente
#define REANUDACION     3//Paquete que avisa de la reanudacion ~ cliente a servidor
#define FIN_PROCESO     4//Paquete que avisa del fin exitoso de un proceso  ~  servidor a cliente
#define EJEC_DEMORADA   5//Paquete que avisa de la ejecucion demorada por superar MMP ~    servidor a cliente
#define DENEGACION_EJEC 6//Paquete que avisa de la no ejecucion por superar MPS ~  servidor a cliente
#define HANDSHAKE       7
#define RTA_HANDSHAKE   8

typedef struct {
    int8_t packageType;
    int32_t length;
    char *data;
}  t_stream;

typedef struct{
    int16_t port;
    int16_t priority;
    char * ip;
    char * code;
}  t_file_package;


int obtener_tamanio_prefijo_payload(char *paquete){
	int32_t i=0;
	for(i=0; paquete[i] != '#'; i++);

		i++;
		while(paquete[i] != '#') {
			i++;
		}
	i++;
	return i;
}

int obtener_tamanio_paquete(char *paquete){
	return atoi(&paquete[2]);
	}
int obtener_tipo_paquete(char *paquete){
	return atoi(&paquete[0]);
	}

char* sub_string(const char* str, size_t begin, size_t len) {
	if (str == 0 || strlen(str) == 0 || strlen(str) < begin
			|| strlen(str) < (begin + len))
		return 0;

	return strndup(str + begin, len);
}
char *recivirBytes(int socketE , int bytesCount, uint8_t * error){
	int allReceived = 0,tamanioPrefijo =0;
	int longNipc;
	char *bytesToReceive = malloc(sizeof(char)*10);

			int received= 0;
				received = recv(socketE , bytesToReceive , bytesCount - allReceived  , MSG_PEEK);
				if(received>5){
				tamanioPrefijo = obtener_tamanio_prefijo_payload(bytesToReceive);
				longNipc = obtener_tamanio_paquete(bytesToReceive)+ tamanioPrefijo;
				bytesToReceive = realloc(bytesToReceive,longNipc+1);

				received = recv(socketE , bytesToReceive , longNipc  , 0);

				bytesToReceive[longNipc]='\0';
				allReceived += received;
				*error=0;
				}
				else *error=1;

			return bytesToReceive;
}


t_file_package * package_file_deserializer(t_stream *stream)
{

	t_file_package *arch = malloc(sizeof(t_file_package));
	int offset=0,i=0,tmp_size=0;

	arch->priority = atoi(&stream->data[0]);
	arch->port = atoi(&stream->data[2]);
	for(i=0; stream->data[i] != '#'; i++);
	i++;
	while(stream->data[i] != '#') {
		i++;
	}
	i++;
	offset+=i;
	for(i=offset,tmp_size=0; stream->data[i] != '#'; i++,tmp_size++);
	arch->ip = malloc(tmp_size);
	sprintf(arch->ip, "%s",(char *)(sub_string(stream->data,offset,tmp_size)));

	tmp_size++;

	offset+=tmp_size;

	for(i=offset,tmp_size=0; stream->data[i] != '\0'; i++,tmp_size++);
	arch->code = malloc(tmp_size);

	sprintf(arch->code, "%s",(char *)(sub_string(stream->data,offset,tmp_size)));

	return arch;

}


int32_t crear_Server(int32_t *socketEscucha){
	int32_t len;
	int32_t yes = 1;
	struct sockaddr_in dirLocal;

	if ((*socketEscucha=socket(AF_INET, SOCK_STREAM, 0))==-1) {
		perror("Error: No se pudo crear el socket");
		return 1;
	}

	bzero((char *) &dirLocal, sizeof(dirLocal));
	dirLocal.sin_family = AF_INET;
	dirLocal.sin_addr.s_addr = INADDR_ANY;
	dirLocal.sin_port = htons(5000); //TODO SACAR ESTO YA QUE LEE DE CONFIG
	len = sizeof(struct sockaddr_in);

	if (setsockopt(*socketEscucha, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int32_t)) == -1) {
		perror("Error: Fallo en setsock");
		return 1;
	}

	if (bind(*socketEscucha, (struct sockaddr *) &dirLocal, len)==-1) {
		perror("Error: No pudo Bindear el socket");
		return 1;
	}

	if (listen(*socketEscucha, MIN_CONEXIONES) ==  -1) {
		perror("Error: No pudo escuchar conexiones el Listen");
		return 1;
	}

	return 0;

}

int numDigits(int64_t numero) {
	int digits = 0;
	if (numero < 0)
		digits = 1;
	while (numero) {
		numero /= 10;
		digits++;

	}
	return digits;
}

t_stream * deserealizar_stream (char * buffer){
	t_stream *stream = malloc(sizeof(t_stream));
	int offset=0,i=0,tmp_size=0;
	stream->packageType = atoi(&buffer[0]);
	stream->length = atoi(&buffer[2]);
	for(i=0; buffer[i] != '#'; i++);
	i++;
	while(buffer[i] != '#') {
		i++;
	}
	i++;
	offset+=i;
	for(tmp_size = 1; (buffer + offset)[tmp_size - 1] != '\0'; tmp_size++);
	stream->data = malloc(tmp_size);
	sprintf(stream->data, "%s", buffer + offset);
	return stream;
}


char *serializar_ope(char *info_operacion, int8_t operacion) { //el paquete se serializa con el tipo de operacion que es

	char *payLoad = malloc(strlen(info_operacion)+1);
	sprintf(payLoad, "%s",  info_operacion);
	char *pack = malloc(numDigits( operacion)+ numDigits( strlen(payLoad)) + strlen(payLoad)+1+2);

	sprintf(pack, "%d#%d#%s", (int8_t)operacion, strlen(payLoad), payLoad);
	free(payLoad);
	return pack;
}



void atenderPedido(char *buff, int32_t fdc) {
	t_stream *stream = deserealizar_stream(buff);
	int tipoPedido = stream->packageType;
	free(buff);
	switch (tipoPedido) {
			case HANDSHAKE:
				char *rtaBuff;
				rtaBuff= serializar_ope("hola",3);
				send(fdc,rtaBuff,strlen(rtaBuff),0);
				break;
			default:
				printf("hola");
				break;
			}




}


	int main (void)
	{

		uint32_t s;
			uint32_t epoll_fd;

			struct epoll_event event;
			struct epoll_event *events;

			int32_t socket_server;
			crear_Server(&socket_server);
			epoll_fd = epoll_create1 (0);
			if (epoll_fd == -1){
			     perror ("epoll_create");
			     abort ();
			 }
			 event.data.ptr=NULL;
			 event.data.u32=0;
			 event.data.u64=0;

			 event.data.fd = socket_server;
			 event.events = EPOLLIN | EPOLLET;
			 s = epoll_ctl (epoll_fd, EPOLL_CTL_ADD, socket_server, &event);
			 if (s == -1){
			   perror ("epoll_ctl");
			   abort ();
			}
			printf("Planificador Iniciado esperando conexiones");
			events = calloc (MAX_EVENTS, sizeof (event));
			while(1){
				int32_t i, n;
			     n = epoll_wait (epoll_fd, events, MAX_EVENTS, -1);
			     for (i = 0; i < n; i++){
			    	 if ((events[i].events & EPOLLERR) ||(events[i].events & EPOLLHUP) || (!(events[i].events & EPOLLIN))){
					      fprintf (stderr, "epoll error\n");
					      close(events[i].data.fd);
					      continue;
					    }
			    	 else if (socket_server == events[i].data.fd){
			    	         struct sockaddr in_addr;
			    	         socklen_t in_len;
			    	         int32_t Nuevofd;
			    	         char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];
		                     in_len = sizeof in_addr;
			    	         Nuevofd = accept(socket_server, &in_addr, &in_len);
			    	                   s = getnameinfo(&in_addr, in_len,hbuf, sizeof(hbuf),sbuf, sizeof(sbuf),NI_NUMERICHOST | NI_NUMERICSERV);
			    	                   if (s == 0){
			    	                      printf("fd: %d nuevo cliente: %s, puerto %s \n", Nuevofd, hbuf, sbuf);
			    	                	   // log_debug(logFile,"Nueva conexion en FD= %d (Cliente :%s, Puerto :%s)", Nuevofd, hbuf, sbuf);//TODO TERMINAR LOGUEO
			    	                   }
		//	    	                   mpp++;
		//	    	                   mps++;
		//	    	                   log_debug(logFile, "LTS - Nuevo nivel de MPP=%d y MPS=%d FD=%d",mpp, mps, Nuevofd);//TODO TERMINAR LOGUEO
			    	                   if (s == -1)
			    	                     abort ();
			    	                   event.data.fd = Nuevofd;
			    	                   event.events = EPOLLIN | EPOLLET;
			    	                   s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, Nuevofd, &event);
			    	                   if (s == -1){
			    	                       perror ("epoll_ctl");
			    	                       abort ();
			    	                   }
			    	     continue;
			    	  } // Fin del evento en el listener
			          else{
			        	  	uint8_t error=0;
			        	  	char * buff = recivirBytes(events[i].data.fd ,sizeof(char)*10,&error);

			        	  	//todo antiguo >>> t_nipc * nipc= recv_nipc(events[i].data.fd, 0, &error);

			    	  		if (!error) {

			    	  			atenderPedido(buff,events[i].data.fd);

			//		    	  			log_debug(logFile, "Recibi error comunicacion cliente %d", events[i].data.fd);
			        	  		 //agregarPedido(poolThreads, nipc, events[i].data.fd);
			        	  	}
			          }
			     }
			}
			return EXIT_SUCCESS;

	}
