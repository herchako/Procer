/*
 ============================================================================
 Name        : servidor.c
 Author      :
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <linux/fs.h>
#include <sys/stat.h>
#include <sys/epoll.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>
#define MAX_EVENTS 10
#define MIN_CONEXIONES 5

int obtener_tamanio_prefijo_payload(char *paquete){
	int32_t i=0;
	for(i=0; paquete[i] != '#'; i++);

		i++;
		while(paquete[i] != '#') {
			i++;
		}
	i++;
	return i;
}

int obtener_tamanio_paquete(char *paquete){
	return atoi(&paquete[2]);
	}
int obtener_tipo_paquete(char *paquete){
	return atoi(&paquete[0]);
	}


char *recivirBytes(int socketE , int bytesCount){
	int allReceived = 0,tamanioPrefijo =0;
	int longNipc;
	char *bytesToReceive = malloc(sizeof(char)*10);

			int received= 0;

				received = recv(socketE , bytesToReceive , bytesCount - allReceived  , MSG_PEEK);
				tamanioPrefijo = obtener_tamanio_prefijo_payload(bytesToReceive);
				longNipc = obtener_tamanio_paquete(bytesToReceive)+ tamanioPrefijo;
				bytesToReceive = realloc(bytesToReceive,longNipc+1);

				received = recv(socketE , bytesToReceive , longNipc  , 0);
				bytesToReceive[longNipc]='\0';
				allReceived += received;

			return bytesToReceive;
}



int32_t crear_Server(int32_t *socketEscucha){
	int32_t len;
	int32_t yes = 1;
	struct sockaddr_in dirLocal;

	if ((*socketEscucha=socket(AF_INET, SOCK_STREAM, 0))==-1) {
		perror("Error: No se pudo crear el socket");
		return 1;
	}

	bzero((char *) &dirLocal, sizeof(dirLocal));
	dirLocal.sin_family = AF_INET;
	dirLocal.sin_addr.s_addr = INADDR_ANY;
	dirLocal.sin_port = htons(5000); //TODO SACAR ESTO YA QUE LEE DE CONFIG
	len = sizeof(struct sockaddr_in);

	if (setsockopt(*socketEscucha, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int32_t)) == -1) {
		perror("Error: Fallo en setsock");
		return 1;
	}

	if (bind(*socketEscucha, (struct sockaddr *) &dirLocal, len)==-1) {
		perror("Error: No pudo Bindear el socket");
		return 1;
	}

	if (listen(*socketEscucha, MIN_CONEXIONES) ==  -1) {
		perror("Error: No pudo escuchar conexiones el Listen");
		return 1;
	}

	return 0;

}



int main (void)
{

	uint32_t s;
		uint32_t epoll_fd;

		struct epoll_event event;
		struct epoll_event *events;

		int32_t socket_server;
		crear_Server(&socket_server);
		epoll_fd = epoll_create1 (0);
		if (epoll_fd == -1){
		     perror ("epoll_create");
		     abort ();
		 }
		 event.data.ptr=NULL;
		 event.data.u32=0;
		 event.data.u64=0;

		 event.data.fd = socket_server;
		 event.events = EPOLLIN | EPOLLET;
		 s = epoll_ctl (epoll_fd, EPOLL_CTL_ADD, socket_server, &event);
		 if (s == -1){
		   perror ("epoll_ctl");
		   abort ();
		}
		printf("Planificador Iniciado esperando conexiones");
		events = calloc (MAX_EVENTS, sizeof (event));
		while(1){
			int32_t i, n;
		     n = epoll_wait (epoll_fd, events, MAX_EVENTS, -1);
		     for (i = 0; i < n; i++){
		    	 if ((events[i].events & EPOLLERR) ||(events[i].events & EPOLLHUP) || (!(events[i].events & EPOLLIN))){
				      fprintf (stderr, "epoll error\n");
				      close(events[i].data.fd);
				      continue;
				    }
		    	 else if (socket_server == events[i].data.fd){
		    	         struct sockaddr in_addr;
		    	         socklen_t in_len;
		    	         int32_t Nuevofd;
		    	         char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];
	                     in_len = sizeof in_addr;
		    	         Nuevofd = accept(socket_server, &in_addr, &in_len);
		    	                   s = getnameinfo(&in_addr, in_len,hbuf, sizeof(hbuf),sbuf, sizeof(sbuf),NI_NUMERICHOST | NI_NUMERICSERV);
		    	                   if (s == 0){
		    	                      printf("fd: %d nuevo cliente: %s, puerto %s \n", Nuevofd, hbuf, sbuf);
		    	                	   // log_debug(logFile,"Nueva conexion en FD= %d (Cliente :%s, Puerto :%s)", Nuevofd, hbuf, sbuf);//TODO TERMINAR LOGUEO
		    	                   }
	//	    	                   mpp++;
	//	    	                   mps++;
	//	    	                   log_debug(logFile, "LTS - Nuevo nivel de MPP=%d y MPS=%d FD=%d",mpp, mps, Nuevofd);//TODO TERMINAR LOGUEO
		    	                   if (s == -1)
		    	                     abort ();
		    	                   event.data.fd = Nuevofd;
		    	                   event.events = EPOLLIN | EPOLLET;
		    	                   s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, Nuevofd, &event);
		    	                   if (s == -1){
		    	                       perror ("epoll_ctl");
		    	                       abort ();
		    	                   }
		    	     continue;
		    	  } // Fin del evento en el listener
		          else{
		        	  	uint8_t error=0;
		        	  	char *bytesToReceive = malloc(strlen("1#13#hola que tal"));
		        	  	//todo antiguo >>> t_nipc * nipc= recv_nipc(events[i].data.fd, 0, &error);
		        	  	recv(events[i].data.fd , bytesToReceive , strlen("1#13#hola que tal")  , 0);
		        	  	recivirBytes(events[i].data.fd ,sizeof(char)*10);


		    	  		if (!error) {
	        	  		puts("llegooooo");
	        	  		puts(buff);
	        	  		free(buff);
		//		    	  			log_debug(logFile, "Recibi error comunicacion cliente %d", events[i].data.fd);
		        	  		 //agregarPedido(poolThreads, nipc, events[i].data.fd);
		        	  	}
		          }
		     }
		}
		return EXIT_SUCCESS;

}
