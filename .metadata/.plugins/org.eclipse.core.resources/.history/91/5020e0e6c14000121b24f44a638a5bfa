/*
** client.c -- a stream socket client demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#define MAX_EVENTS 20
#define MIN_CONEXIONES 5

#define PROCESO         1//Paquete que envia un proceso ~ cliente a servidor
#define SUSPENSION      2//Paquete que avisa de la suspension ~  servidor a cliente
#define REANUDACION     3//Paquete que avisa de la reanudacion ~ cliente a servidor
#define FIN_PROCESO     4//Paquete que avisa del fin exitoso de un proceso  ~  servidor a cliente
#define EJEC_DEMORADA   5//Paquete que avisa de la ejecucion demorada por superar MMP ~    servidor a cliente
#define DENEGACION_EJEC 6//Paquete que avisa de la no ejecucion por superar MPS ~  servidor a cliente
#define HANDSHAKE       7
#define RTA_HANDSHAKE   8

typedef struct {
    int8_t packageType;
    int32_t length;
    char *data;
}  t_stream;

typedef struct{
	uint32_t file_desc;
	int16_t priority;
	char *code;
}  t_file_package;

int obtener_tamanio_paquete(char *paquete){
	return atoi(&paquete[2]);
	}

int obtener_tipo_paquete(char *paquete){
	return atoi(&paquete[0]);
	}
int obtener_tamanio_prefijo_payload(char *paquete){
	int32_t i=0;
	for(i=0; paquete[i] != '#'; i++);

		i++;
		while(paquete[i] != '#') {
			i++;
		}
	i++;
	return i;
}

int numDigits(int64_t numero) {
	int digits = 0;
	if (numero < 0)
		digits = 1;
	while (numero) {
		numero /= 10;
		digits++;

	}
	return digits;
}
int load_file_to_memory(const char *filename, char **result) {
	int32_t tam_arch = 0;
	FILE *f = fopen(filename, "r");
	if (f == NULL) {
		*result = NULL;
		//		return EXIT_FAILURE; //error apertura
		return 1;
	}
	fseek(f, 0, SEEK_END);
	tam_arch = ftell(f);
	fseek(f, 0, SEEK_SET);
	*result = (char *) malloc(tam_arch + 1);
	if (tam_arch != fread(*result, sizeof(char), tam_arch, f)) {
		free(*result);
		//		return EXIT_FAILURE; //error lectura
		return 5;
	}
	fclose(f);
	(*result)[tam_arch] = 0;
	//free(result);
	return tam_arch;
}
char *serializar_arch(t_file_package *paq) {

	char *payLoad = malloc(numDigits(paq->file_desc)+numDigits(paq->priority)+strlen(paq->code)+1+2);
	sprintf(payLoad, "%d#%d#%s", (uint32_t)paq->file_desc,(int16_t)paq->priority, paq->code);
	char *pack = malloc(numDigits(PROCESO) + numDigits((int64_t)strlen(payLoad)) + strlen(payLoad)+1+2);

	sprintf(pack, "%d#%d#%s",PROCESO, strlen(payLoad)+1, payLoad);
	free(payLoad);
	return pack;
}



char *serializar_ope(char *info_operacion, int8_t operacion) { //el paquete se serializa con el tipo de operacion que es

	char *payLoad = malloc(strlen(info_operacion)+1);
	sprintf(payLoad, "%s",  info_operacion);
	char *pack = malloc(numDigits( operacion)+ numDigits( strlen(payLoad)+1) + strlen(payLoad)+1+2);

	sprintf(pack, "%d#%d#%s", (int8_t)operacion, strlen(payLoad)+1, payLoad);
	free(payLoad);
	return pack;
}



uint32_t conectar_Cliente(uint32_t *fdCliente, uint32_t puerto, char* ip) {

	struct sockaddr_in *dirServer = malloc(sizeof(struct sockaddr_in));
	uint32_t len;

	if ((*fdCliente = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
		printf("No se pudo crear el socket");//todo loguear
		//log_error(logFile, "Error: No se pudo crear el socket");
		return EXIT_FAILURE;
	}

	dirServer->sin_family = AF_INET;
	dirServer->sin_addr.s_addr = inet_addr(ip);
	dirServer->sin_port = htons(puerto);
	len = sizeof(struct sockaddr_in);

	if (connect(*fdCliente, (struct sockaddr *) dirServer, len) == -1) {
		perror("Error: No se pudo conectar");
		return EXIT_FAILURE;
	}

	free(dirServer);
	return EXIT_SUCCESS;
}


uint32_t iniciar_conexion(char* ip, uint32_t puerto) {
	uint32_t fdConex;

	char *handshake = serializar_ope("Hola", HANDSHAKE);
	//TODO log_debug(logFile, "Handshake a %s:%d", ip, puerto);
	conectar_Cliente(&fdConex, puerto, ip);


	send(fdConex, handshake, strlen(handshake), 0);
	return fdConex;
}


char* sub_string(const char* str, size_t begin, size_t len) {
	if (str == 0 || strlen(str) == 0 || strlen(str) < begin
			|| strlen(str) < (begin + len))
		return 0;

	return strndup(str + begin, len);
}
char *recivirBytes(int socketE , int bytesCount, uint8_t * error){
	int allReceived = 0,tamanioPrefijo =0;
	int longNipc;
	char *bytesToReceive = malloc(sizeof(char)*10);

			int received= 0;

				received = recv(socketE , bytesToReceive , bytesCount - allReceived  , MSG_PEEK);
				if(received>5){
				tamanioPrefijo = obtener_tamanio_prefijo_payload(bytesToReceive);
				longNipc = obtener_tamanio_paquete(bytesToReceive)+ tamanioPrefijo;
				bytesToReceive = realloc(bytesToReceive,longNipc+1);

				received = recv(socketE , bytesToReceive , longNipc  , 0);

				bytesToReceive[longNipc]='\0';
				allReceived += received;
				*error=0;
				}
				else *error=1;

			return bytesToReceive;
}



t_file_package * package_file_deserializer(t_stream *stream)
{

	t_file_package *arch = malloc(sizeof(t_file_package));
	int offset=0,i=0,tmp_size=0;

	arch->file_desc = atoi(&stream->data[0]);
	arch->priority = atoi(&stream->data[2]);
	for(i=0; stream->data[i] != '#'; i++);
	i++;
	while(stream->data[i] != '#') {
		i++;
	}
	i++;
	offset+=i;
	for(i=offset,tmp_size=0; stream->data[i] != '\0'; i++,tmp_size++);
	arch->code = malloc(tmp_size);
	sprintf(arch->code, "%s",(char *)(sub_string(stream->data,offset,tmp_size)));


	return arch;

}


int32_t crear_Server(int32_t *socketEscucha){
	int32_t len;
	int32_t yes = 1;
	struct sockaddr_in dirLocal;

	if ((*socketEscucha=socket(AF_INET, SOCK_STREAM, 0))==-1) {
		perror("Error: No se pudo crear el socket");
		return 1;
	}

	bzero((char *) &dirLocal, sizeof(dirLocal));
	dirLocal.sin_family = AF_INET;
	dirLocal.sin_addr.s_addr = INADDR_ANY;
	dirLocal.sin_port = htons(5000); //TODO SACAR ESTO YA QUE LEE DE CONFIG
	len = sizeof(struct sockaddr_in);

	if (setsockopt(*socketEscucha, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int32_t)) == -1) {
		perror("Error: Fallo en setsock");
		return 1;
	}

	if (bind(*socketEscucha, (struct sockaddr *) &dirLocal, len)==-1) {
		perror("Error: No pudo Bindear el socket");
		return 1;
	}

	if (listen(*socketEscucha, MIN_CONEXIONES) ==  -1) {
		perror("Error: No pudo escuchar conexiones el Listen");
		return 1;
	}

	return 0;

}



t_stream * deserealizar_stream (char * buffer){
	t_stream *stream = malloc(sizeof(t_stream));
	int offset=0,i=0,tmp_size=0;
	stream->packageType = atoi(&buffer[0]);
	stream->length = atoi(&buffer[2]);
	for(i=0; buffer[i] != '#'; i++);
	i++;
	while(buffer[i] != '#') {
		i++;
	}
	i++;
	offset+=i;
	for(tmp_size = 1; (buffer + offset)[tmp_size - 1] != '\0'; tmp_size++);
	stream->data = malloc(tmp_size);
	sprintf(stream->data, "%s", buffer + offset);
	return stream;
}




void free_package_file (t_file_package *self)
{

    free(self->code);
    free(self);
}
void free_stream (t_stream *self)
{
    free(self->data);
    free(self);
}
void free_buffer(char * self)
{
    free(self);
}

t_file_package * create_package_file ( uint32_t file_desc,int16_t priority,char *code)
{
    t_file_package *paq = malloc(sizeof(t_file_package));
    paq->priority = priority;
    paq->file_desc = file_desc;
    paq->code = malloc(strlen(code)+1);
    strcpy(paq->code,code);
    return paq;
}


int enviarScript(uint32_t fd_client, int16_t priority,char *codigo){
	t_file_package *paqArch = create_package_file( fd_client,priority,codigo);
	char * archSerial = serializar_arch(paqArch);
	send(fd_client,archSerial,strlen(archSerial)+1,0);
	free(archSerial);
	free(codigo);


	free_package_file(paqArch);
return 0;
}

int atenderPedido(char *buff, int32_t fdc) {
	t_stream *stream = deserealizar_stream(buff);
	int tipoPedido = stream->packageType;
	t_file_package * archivo;
	char *rtaBuff;
	free(buff);
	switch (tipoPedido) {
			case HANDSHAKE:
				rtaBuff= serializar_ope(stream->data,RTA_HANDSHAKE);
				send(fdc,rtaBuff,strlen(rtaBuff)+1,0);
				free(rtaBuff);
				free_stream (stream);
				break;
			case PROCESO:
				archivo = package_file_deserializer(stream);
				puts(archivo->code);
				//todo free a archivo?
				rtaBuff= serializar_ope("Finalizo el proceso",FIN_PROCESO);
				send(fdc,rtaBuff,strlen(rtaBuff)+1,0);
				free(rtaBuff);
				free_stream(stream);
				break;
			default:
				printf("hola");
				break;
			}
return 0;
}
int main (void)
{
//  	uint32_t fdConex;
//	char * bytesToReceive = malloc(strlen("bueno dale"));
//	conectar_Cliente(&fdConex, 5000, "127.0.0.1");
//	char * data = serializar_ope("hola que tal", 1);
//	send(fdConex, data, strlen(data)+1, 0);
//	recv(fdConex , bytesToReceive , strlen("bueno dale")  , 0);
//	puts(bytesToReceive);
//	printf("el fd de coneccion es %d ", fdConex);
//	return EXIT_SUCCESS;

//----------------
	uint32_t fd_client = iniciar_conexion("127.0.0.1",5000);
	printf("el file descriptor es :%d\n",fd_client);
	int8_t finalizado=0;
	char * recv;
	char * codigo;
	uint8_t errorr=0;
	t_stream *operacion;

	int16_t prioridad=15;

	if(load_file_to_memory("/home/utnso/archivo",&codigo)==1)
		printf("error apertura");//todo



	//t_file_package * paqArch = create_package_file ( 5000,21,"127.0.0.0", codigo);


	while((!finalizado)&&(!errorr)){
		recv = recivirBytes(fd_client, sizeof(char)*10, &errorr);
		operacion = deserealizar_stream (recv);
		printf("recibi resuesta del server \n");

		switch (obtener_tipo_paquete(recv)){
		case RTA_HANDSHAKE:
			puts("HandShakeOK:\n");
			puts(operacion->data);
			enviarScript(fd_client,prioridad,codigo);
			free_stream(operacion);
			break;
		case FIN_PROCESO:
				printf("El proceso ha finalizado exitosamente ! \n");//todo
				puts(operacion->data);

				close(fd_client);
				finalizado =1;
				free_stream(operacion);
				break;
		default:
			printf("------cualquiera-----");
			break;


		}

		printf("recibi paquete %d\n",obtener_tipo_paquete(recv));
	}
	/*	uint8_t finalizadoOk = 0;
	uint8_t enviarDatos = 0;
	uint8_t nipctype = 0;
	char* priority;
	char* codigoScript;
	t_operacion* oper;

	t_nipc *nipcPI = malloc(sizeof(t_nipc));
	while (!finalizadoOk) {
		enviarDatos = 0;
		t_nipc *nipcPP = recv_nipc(fdConex, 0);
		switch (nipcPP->type) {
		case _HANDSHAKE:
			nipcPI->payload = 0;
			nipcPI->length = 0;
			nipctype = _PROCESO;
			break;
		case _HANDNOTOK:
			log_debug(logFile, "Handshake: conexion fallida");
			close(fdConex);
			return EXIT_FAILURE;
			break;
		case _SCRIPT:
			priority = obtenerPrioridad();
			codigoScript = procesarScript(argv);
			nipcPI = crearNipcScript(fdConex, priority, codigoScript);
			nipctype = _SCRIPT;
			log_debug(logFile,
					"Se envia el script al planificador para procesar");
			break;
		case _DEMORADO:
			printf("Se ha alcanzado el nivel de MPP, aguarde ...\n");
			log_debug(logFile, "%s", nipcPP->payload);
			enviarDatos = 1;
			break;
		case _CERRAR:
			printf("Se ha alcanzado el nivel de MPS, cerrando conexion...\n");
			log_debug(logFile, "%s", nipcPP->payload);
			close(fdConex);
			return EXIT_FAILURE;
			break;
		case _FINALIZADO:
			log_debug(logFile, "El proceso ha finalizado exitosamente.");
			printf("El proceso ha finalizado exitosamente ! \n");
			oper = deserializer_oper(nipcPP->payload);
			t_list* datosPcb = deserializer_datos(oper);
			imprimirDatos(datosPcb);
			enviarDatos = 1;
			finalizadoOk = 1;
			close(fdConex);
			free(oper);
			break;
		case _IMPRIMIR:
			log_debug(logFile, "Impresion de variable");
			oper = deserializer_oper(nipcPP->payload);
			printf("%s\n", oper->data);
			enviarDatos = 1;
			break;
		case _SUSPENDIDO:
			log_debug(logFile, "El proceso ha sido suspendido");
			printf("El proceso ha sido suspendido \n");
			oper = deserializer_oper(nipcPP->payload);
			t_pcb_i* pcbSuspendido = deserializer_pcb(oper);
			imprimirPCBSuspendido(pcbSuspendido);
			printf("Presione la tecla C para continuar su ejecucion: ");
			char rta = getchar();
			while ((rta != 'c') && (rta != 'C')) {
				rta = getchar();
				if ((rta != 'c') && (rta != 'C'))
					printf("Incorrecto, para reanudar presione la tecla C\n");
				printf("Presione la tecla C para continuar su ejecucion: ");
			}
			rta = 'N';
			log_debug(logFile,
					"Se pide reanudacion del proceso al planificador");
			nipcPI->length = 0;
			nipcPI->payload = 0;
			nipctype = _REANUDAR;
			free(oper);
			break;
		default:
			printf("Llegó cualquier cosa, chau");
			return EXIT_FAILURE;
			break;
		}
		if (!enviarDatos)
			send_nipc(nipctype, fdConex, nipcPI, 0);
	}*/
	return 0;
}





















