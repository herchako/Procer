/*
 ** client.c -- a stream socket client demo
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>

#include <commons/log.h>
#include <commons/serialization.h>
#include <commons/sockets.h>
#include <commons/pcb.h>
#include <arpa/inet.h>






char* sub_string(const char* str, size_t begin, size_t len) {
	if (str == 0 || strlen(str) == 0 || strlen(str) < begin
			|| strlen(str) < (begin + len))
		return 0;

	return strndup(str + begin, len);
}

int numDigits(int64_t numero) {
	int digits = 0;
	if (numero < 0)
		digits = 1;
	while (numero) {
		numero /= 10;
		digits++;

	}
	return digits;
}
int load_file_to_memory(const char *filename, char **result) {
	int32_t tam_arch = 0;
	FILE *f = fopen(filename, "r");
	if (f == NULL) {
		*result = NULL;
		//		return EXIT_FAILURE; //error apertura
		return 1;
	}
	fseek(f, 0, SEEK_END);
	tam_arch = ftell(f);
	fseek(f, 0, SEEK_SET);
	*result = (char *) malloc(tam_arch + 1);
	if (tam_arch != fread(*result, sizeof(char), tam_arch, f)) {
		free(*result);
		//		return EXIT_FAILURE; //error lectura
		return 5;
	}
	fclose(f);
	(*result)[tam_arch] = 0;
	//free(result);
	return tam_arch;
}




int atenderPedido(char *buff, int32_t fdc) {
	t_stream *stream = deserealizar_stream(buff);
	int tipoPedido = stream->packageType;
	t_file_package * archivo;
	char *rtaBuff;
	free(buff);
	switch (tipoPedido) {
			case HANDSHAKE:
				rtaBuff= serializar_ope(stream->data,RTA_HANDSHAKE);
				send(fdc,rtaBuff,strlen(rtaBuff),0);
				free(rtaBuff);
				free_stream (stream);
				break;
			case PROCESO:
				archivo = package_file_deserializer(stream);
				puts(archivo->code);
				//todo free a archivo?
				rtaBuff= serializar_ope("Finalizo el proceso",FIN_PROCESO);
				send(fdc,rtaBuff,strlen(rtaBuff),0);
				free(rtaBuff);
				free_stream(stream);
				break;
			case REANUDACION:
				printf("reanudo:   %s\n",stream->data);
				free_stream(stream);
				break;
			case IMPRIMIR_VAR:
				printf("Se imprime la variable :   %s\n",stream->data);
				free_stream(stream);
				break;
			default:
				printf("CUALQUIERA");
				break;
			}
return 0;
}

double rafaga_estimada;
double rafaga_real;
double valor_alfa;
int main(int argc, char **argv) {
//TODO LISTO PARA QUE LEA DE ENTORNO, CUANDO SE USE, SACAR EL FREE QUE IRIA A LO ULTIMO Y PONER LOS RESULTADOS EN  INICIAR CONEXION
//	t_env_var * env_var=get_env_var ();
//	if(!env_var){
//		printf("alguna de las variables de entorno no inicializada\n");//TODO
//		free(env_var);
//		return EXIT_FAILURE;
//	}
//	printf("%d\n",env_var->pp_port);
//	printf("%s\n",env_var->pp_ip);
//	free(env_var);
//	return 0;
//
	function_logueo("pi","main","INFO","Se inicio el pi");


	uint32_t fd_client = iniciar_conexion("127.0.0.1", 5000);
	printf("el file descriptor es :%d\n", fd_client);
	int8_t finalizado = 0;
	char * recv, *tosend;
	char * codigo;
	uint8_t errorr = 0;
	t_stream *operacion;

	int16_t prioridad = 15;

	if (load_file_to_memory("/home/utnso/archivo", &codigo/*argv*/) == 1)//todo
		function_logueo("pi","main","INFO","Errora apertura archivo"); //todo
	limpiarCodigo(codigo, '\r');
	//t_file_package * paqArch = create_package_file ( 5000,21,"127.0.0.0", codigo);

	while ((!finalizado) && (!errorr)) {
		recv = recivirBytes(fd_client, sizeof(char) * 10, &errorr);
		operacion = deserealizar_stream(recv);
		printf("recibi resuesta del server \n");

		switch (obtener_tipo_paquete(recv)) {
		case RTA_HANDSHAKE:
			puts("HandShakeOK:\n");
			puts(operacion->data);
			enviarScript(fd_client, prioridad, codigo);
			free_stream(operacion);
			break;
		case FIN_PROCESO:
			printf("El proceso ha finalizado exitosamente ! \nEstado final del proceso\n"); //todo
			printf("%s", operacion->data);

			close(fd_client);
			finalizado = 1;
			free_stream(operacion);
			break;
		case SUSPENSION:
			printf("El proceso fue suspendido\nEstado del proceso\n"); //todo LOG
			printf("%s", operacion->data);
			printf("Presione 'y' + intro para reanudar proceso");
			while (!getchar() == 'y')
				;
			tosend = serializar_ope(operacion->data, REANUDACION);
			send(fd_client, tosend, strlen(tosend), 0);
			free(tosend);
			break;
		case DENEGACION_EJEC:
			printf("El proceso fue denegado para su ejecucion ! \n"); //todo
			printf("%s", operacion->data);

			close(fd_client);
			finalizado = 1;
			free_stream(operacion);
			break;
		case EJEC_DEMORADA:
				printf("El proceso fue demorado, quizas tarde un poco mas de lo que se planeaba! \n"); //todo
				printf("%s", operacion->data);
				close(fd_client);
				finalizado = 1;
				free_stream(operacion);
				break;
		case IMPRIMIR_VAR:
						printf("El servidor solicita imprimar una variable \n");
						printf("%s", operacion->data);
						free_stream(operacion);
						break;

		default:
			printf("------cualquiera-----");
			break;

		}

		printf("recibi paquete %d\n", obtener_tipo_paquete(recv));
	}
	/*	uint8_t finalizadoOk = 0;
	 uint8_t enviarDatos = 0;
	 uint8_t nipctype = 0;
	 char* priority;
	 char* codigoScript;
	 t_operacion* oper;

	 t_nipc *nipcPI = malloc(sizeof(t_nipc));
	 while (!finalizadoOk) {
	 enviarDatos = 0;
	 t_nipc *nipcPP = recv_nipc(fdConex, 0);
	 switch (nipcPP->type) {
	 case _HANDSHAKE:
	 nipcPI->payload = 0;
	 nipcPI->length = 0;
	 nipctype = _PROCESO;
	 break;
	 case _HANDNOTOK:
	 log_debug(logFile, "Handshake: conexion fallida");
	 close(fdConex);
	 return EXIT_FAILURE;
	 break;
	 case _SCRIPT:
	 priority = obtenerPrioridad();
	 codigoScript = procesarScript(argv);
	 nipcPI = crearNipcScript(fdConex, priority, codigoScript);
	 nipctype = _SCRIPT;
	 log_debug(logFile,
	 "Se envia el script al planificador para procesar");
	 break;
	 case _DEMORADO:
	 printf("Se ha alcanzado el nivel de MPP, aguarde ...\n");
	 log_debug(logFile, "%s", nipcPP->payload);
	 enviarDatos = 1;
	 break;
	 case _CERRAR:
	 printf("Se ha alcanzado el nivel de MPS, cerrando conexion...\n");
	 log_debug(logFile, "%s", nipcPP->payload);
	 close(fdConex);
	 return EXIT_FAILURE;
	 break;
	 case _FINALIZADO:
	 log_debug(logFile, "El proceso ha finalizado exitosamente.");
	 printf("El proceso ha finalizado exitosamente ! \n");
	 oper = deserializer_oper(nipcPP->payload);
	 t_list* datosPcb = deserializer_datos(oper);
	 imprimirDatos(datosPcb);
	 enviarDatos = 1;
	 finalizadoOk = 1;
	 close(fdConex);
	 free(oper);
	 break;
	 case _IMPRIMIR:
	 log_debug(logFile, "Impresion de variable");
	 oper = deserializer_oper(nipcPP->payload);
	 printf("%s\n", oper->data);
	 enviarDatos = 1;
	 break;
	 case _SUSPENDIDO:
	 log_debug(logFile, "El proceso ha sido suspendido");
	 printf("El proceso ha sido suspendido \n");
	 oper = deserializer_oper(nipcPP->payload);
	 t_pcb_i* pcbSuspendido = deserializer_pcb(oper);
	 imprimirPCBSuspendido(pcbSuspendido);
	 printf("Presione la tecla C para continuar su ejecucion: ");
	 char rta = getchar();
	 while ((rta != 'c') && (rta != 'C')) {
	 rta = getchar();
	 if ((rta != 'c') && (rta != 'C'))
	 printf("Incorrecto, para reanudar presione la tecla C\n");
	 printf("Presione la tecla C para continuar su ejecucion: ");
	 }
	 rta = 'N';
	 log_debug(logFile,
	 "Se pide reanudacion del proceso al planificador");
	 nipcPI->length = 0;
	 nipcPI->payload = 0;
	 nipctype = _REANUDAR;
	 free(oper);
	 break;
	 default:
	 printf("Lleg√≥ cualquier cosa, chau");
	 return EXIT_FAILURE;
	 break;
	 }
	 if (!enviarDatos)
	 send_nipc(nipctype, fdConex, nipcPI, 0);
	 }*/
	return 0;
}

